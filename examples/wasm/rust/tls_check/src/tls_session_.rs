mod aes256gcm;
mod certs;
mod hkdf_sha256;
mod x25519;
mod format;

use x25519::curve25519_donna;
use format::*;
use hkdf_sha256::*;
use certs::check_certs;

use base64url::decode;
use hex::FromHex;

pub fn get_root_cert_from_online() -> [u8;1382] {
    certs::ROOT_CERT_FROM_ONLINE
}

pub struct Keys {
    pub public: [u8; 32],
    pub private: [u8; 32],//Vec<u8>,
    pub handshake_secret: [u8;32],
    pub client_handshake_secret: [u8;32],
    pub client_handshake_key: [u8;16],
    pub server_handshake_key: [u8;16],
    pub client_handshake_iv: [u8;12],
    pub server_handshake_iv: [u8;12],
    pub client_application_key: [u8;16],
    pub client_application_iv: [u8;12],
    pub server_application_key: [u8;16],
    pub server_application_iv: [u8;12],
}

pub fn key_pair() -> Keys {
    //let private_key = random(32);
    //let private_key = random32bytes();
    let private_key = [231, 226, 189, 128, 175, 192, 46, 233, 160, 243, 227, 168, 186, 174, 207, 111, 124, 21, 6, 220, 18, 155, 18, 17, 39, 165, 203, 108, 109, 3, 40, 186];
    let basepoint:[u8;32] = [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let public_key = curve25519_donna(&private_key, &basepoint);

    Keys {
        public: public_key, // public_key.compress().to_bytes().to_vec(),
        private: private_key,
        //server_public: Vec::new(),
        handshake_secret: [0u8;32],
        client_handshake_secret: [0u8;32],
        client_handshake_key: [0u8;16],
        server_handshake_key: [0u8;16],
        client_handshake_iv: [0u8;12],
        server_handshake_iv: [0u8;12],
        client_application_key: [0u8;16],
        client_application_iv: [0u8;12],
        server_application_key: [0u8;16],
        server_application_iv: [0u8;12],
    }
}

// AEAD helper functions

fn decrypt(key: &[u8;16], iv: &[u8;12], wrapper: &[u8]) -> Vec<u8> {

    let block = aes256gcm::new_cipher(key);
    let aes_gcm = aes256gcm::new_gcm(block);

    let additional = &wrapper[0..5];
    let ciphertext = &wrapper[5..];

    let plaintext = aes_gcm.open(&[], iv, ciphertext, additional);
    return plaintext;
}

fn encrypt(key: &[u8;16], iv: &[u8;12], plaintext: &[u8], additional: &[u8]) -> Vec<u8> {
    let block = aes256gcm::new_cipher(key);
    let aes_gcm = aes256gcm::new_gcm(block);

    //let nonce = Nonce::from_slice(iv); // 96-bits; retrieve nonce from the IV
    //let ciphertext = aesgcm.encrypt(nonce, additional, plaintext).expect("Encryption failed");
    let ciphertext = aes_gcm.seal(&[], iv, plaintext, additional);

    [additional.to_vec(), ciphertext].concat() // Concatenate additional data with ciphertext
}

pub fn hkdf_expand_label(secret: &[u8;32], label: &str, context: &[u8], length: u16) -> Vec<u8> {
    // Construct HKDF label
    let mut hkdf_label = vec![];
    hkdf_label.extend_from_slice(&length.to_be_bytes());
    let tls13_prefix = b"tls13 ";
    hkdf_label.push((tls13_prefix.len()+label.as_bytes().len()) as u8);
    hkdf_label.extend_from_slice(tls13_prefix);
    hkdf_label.extend_from_slice(label.as_bytes());

    hkdf_label.push(context.len() as u8);
    hkdf_label.extend_from_slice(context);

    // Expand using HKDF
    let mut reader = hkdf_sha256::expand(secret, &hkdf_label[..]);//let hkdf = Hkdf::<Sha256>::new(Some(secret), &hkdf_label);
    let buf = reader.read(length as usize);

    buf
}

pub fn derive_secret(secret: &[u8;32], label: &str, transcript_messages: &[u8]) -> [u8; 32] {

    let hash = hkdf_sha256::sum256( transcript_messages);
    let secret = hkdf_expand_label(secret, label, &hash, 32);
    secret.try_into().unwrap()

}

pub fn extract_json_public_key_from_tls(raw: Vec<u8>) -> Vec<u8> {
    let kid = &raw[..20];
    let certificate_len = (256*raw[20] as u16 + raw[21] as u16) as usize;

    let certificate = &raw[22..22+certificate_len];
    let data = &raw[22+certificate_len..];

    // the first output byte indicates the success of the process: if it equals to 1 then success
    // then follows the public keys from json
    // if the first bytes equals to 0 then unsuccess and the error code follows
    let private_key:[u8;32] = data[0..32].try_into().unwrap();
    let records_send: u8 = data[32];
    let records_received: u8 = data[33];
    // check len of data
    if data.len()<6000{ // 6500
        return vec![0u8, 3u8, 33u8]; // "insufficient len" : 0x3, 0x21 = 801
    }
    let client_hello:[u8;166] = data[34..200].try_into().unwrap(); // len is 166 bytes
    if client_hello[0] != 0x16 {
        return vec![0u8, 3u8, 34u8]; // "client hello not found"
    }
    let server_hello:[u8;95] = data[200..295].try_into().unwrap(); // len is 95 bytes
    if server_hello[0] != 0x16 {
        return vec![0u8, 3u8, 35u8]; // "server hello not found"
    }
    let enc_ser_handshake_len = 256*data[298] as u16 + data[299] as u16;
    let handshake_end_index = 295 + 5 + enc_ser_handshake_len as usize;

    // let encrypted_server_handshake:[u8;4350] = data[295..handshake_end_index].try_into().unwrap();
    let encrypted_server_handshake = &data[295..handshake_end_index];

    let application_request:[u8;100] = data[handshake_end_index..handshake_end_index+100].try_into().unwrap();
    let encrypted_ticket:[u8;540] = data[handshake_end_index+100..handshake_end_index+100+540].try_into().unwrap(); // len of ticket is 524
    //let http_response:[u8;1601] = data[handshake_end_index+640..handshake_end_index+640+1601].try_into().unwrap();
    let http_response = &data[handshake_end_index+640..];

    let basepoint:[u8;32] = [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let public_key = curve25519_donna(&private_key, &basepoint);


    let server_hello_data = parse_server_hello(&server_hello[5..]);

    // ================== begin make handshake keys ===============================================================================================
    let zeros = [0u8; 32];
    let psk = [0u8; 32]; // Предполагается, что psk инициализируется где-то

    let shared_secret = curve25519_donna(&private_key, &server_hello_data.public_key);

    // Хэндшейк с использованием HKDF
    let early_secret = hkdf_sha256::extract(&zeros,&psk);

    let derived_secret = derive_secret(&early_secret, "derived", &[]);

    let handshake_secret = hkdf_sha256::extract(&shared_secret, &derived_secret);

    let handshake_messages = format::concatenate(
            &[&client_hello[5..], &server_hello[5..] ]
    );

    let c_hs_secret = derive_secret(&handshake_secret, "c hs traffic", &handshake_messages);
    let client_handshake_secret = c_hs_secret.clone();
    let client_handshake_key: [u8;16] = hkdf_expand_label(&c_hs_secret, "key", &[], 16).try_into().unwrap();
    let client_handshake_iv: [u8;12] = hkdf_expand_label(&c_hs_secret, "iv", &[], 12).try_into().unwrap();

    let s_hs_secret = derive_secret(&handshake_secret, "s hs traffic", &handshake_messages);
    //let session_keys_server_handshake_key = hkdf_expand_label(&s_hs_secret, "key", &[], 16);

    let server_handshake_key: [u8;16] = hkdf_expand_label(&s_hs_secret, "key", &[], 16).try_into().unwrap();
    let server_handshake_iv: [u8;12] = hkdf_expand_label(&s_hs_secret, "iv", &[], 12).try_into().unwrap();

    // ============== begin parse server handshake =====================
    if encrypted_server_handshake[0] != 0x17 {
        return vec![0u8, 3u8, 36u8];// "not found encrypted server handshake"
    }

    let server_handshake_message = decrypt(&server_handshake_key, &server_handshake_iv, &encrypted_server_handshake[..]);
    let decrypted_server_handshake = DecryptedRecord{ 0: server_handshake_message};

    // ============= begin make application keys ===================================
    let handshake_messages = format::concatenate( &[
        &client_hello[5..],
        &server_hello[5..],
        &decrypted_server_handshake.contents()]
    );

    let derived_secret = derive_secret(&handshake_secret, "derived", &[]);
    let master_secret = hkdf_sha256::extract(&zeros, &derived_secret);//let master_secret = Hkdf::<Sha256>::extract(Some(&zeros), &derived_secret);

    let c_ap_secret = derive_secret(&master_secret, "c ap traffic", &handshake_messages);
    let client_application_key: [u8;16] = hkdf_expand_label(&c_ap_secret, "key", &[], 16).try_into().unwrap();
    let client_application_iv: [u8;12] = hkdf_expand_label(&c_ap_secret, "iv", &[], 12).try_into().unwrap();

    let s_ap_secret = derive_secret(&master_secret, "s ap traffic", &handshake_messages);
    let server_application_key: [u8;16] = hkdf_expand_label(&s_ap_secret, "key", &[], 16).try_into().unwrap();
    let server_application_iv: [u8;12] = hkdf_expand_label(&s_ap_secret, "iv", &[], 12).try_into().unwrap();

    // ========== begin check handshake ================
    let handshake_data = decrypted_server_handshake.contents();//[5..];
    let certs_chain = &handshake_data[7..];

    //next three bytes is the length of certs chain
    let certs_chain_len = (certs_chain[0] as usize)*65536 + (certs_chain[1] as usize)*256 + (certs_chain[2] as usize);

    if !check_certs(&certs_chain[4..certs_chain_len+1]) {
        return vec![0u8, 3u8, 37u8]; // "error in certificates chain !"
    }

    // =================== begin check application request ===================
    let domain = "www.googleapis.com";
    let req = format!("GET /oauth2/v3/certs HTTP/1.1\r\nHost: {}\r\nConnection: close\r\n\r\n", domain);
    // req.as_bytes()
    // match with application_request

    // =================== begin decryption ticket and check =========================

    // =================== begin decryption application response =====================
    //let ciphertext = [0x17, 0x03, 0x03, 0x05, 0x5f, 0x62, 0x1f, 0xf7, 0x3b, 0x44, 0xea, 0x1b, 0xe2, 0xde, 0x06, 0x26, 0x45, 0xcb, 0xa5, 0x3d, 0xed, 0x43, 0xd3, 0x59, 0xe5, 0x33, 0x7a, 0x81, 0x2a, 0x9d, 0x3a, 0x16, 0x54, 0x73, 0x14, 0x07, 0x77, 0xf9, 0xa1, 0x23, 0x34, 0x80, 0xfa, 0xb3, 0x04, 0x2a, 0xe3, 0x06, 0xaa, 0xa1, 0x30, 0x31, 0x0a, 0x3e, 0x96, 0x7e, 0xa0, 0x38, 0xa2, 0xc2, 0xfd, 0x6e, 0xb8, 0xcd, 0x63, 0xbd, 0xe6, 0x49, 0x74, 0x2d, 0x1c, 0x0d, 0xeb, 0x96, 0xf1, 0xce, 0x52, 0x3a, 0xfd, 0xb7, 0xcc, 0xed, 0x49, 0xad, 0xd9, 0x64, 0xa2, 0x62, 0x06, 0x19, 0x69, 0x72, 0xa3, 0xd2, 0x68, 0x96, 0xa8, 0x0b, 0x5f, 0xb7, 0x68, 0x62, 0x9d, 0xdc, 0xb2, 0xa0, 0x28, 0x62, 0x25, 0x03, 0x56, 0x89, 0x81, 0x55, 0xa4, 0xf8, 0x2d, 0xea, 0xcd, 0x03, 0x10, 0x4e, 0xdd, 0xed, 0x14, 0x80, 0x02, 0x13, 0x38, 0x40, 0xb3, 0xa2, 0x1e, 0x98, 0x9b, 0xb0, 0x17, 0x93, 0x08, 0x21, 0x42, 0xce, 0xb7, 0x56, 0xa4, 0x3c, 0x18, 0x98, 0x4d, 0x0a, 0x10, 0x2d, 0xc1, 0xc2, 0x05, 0xde, 0x09, 0xb1, 0x46, 0xa7, 0x06, 0x99, 0x3c, 0x7f, 0xa7, 0x57, 0xbb, 0x97, 0x00, 0x40, 0x33, 0x72, 0x77, 0x85, 0x3e, 0xb6, 0x9e, 0xfe, 0x24, 0x91, 0x60, 0xb8, 0x51, 0x63, 0x00, 0x8e, 0x0d, 0xfb, 0x3d, 0x31, 0x44, 0xba, 0x68, 0x23, 0x1c, 0x81, 0x1c, 0xb7, 0x67, 0x36, 0x00, 0x3d, 0x28, 0xf6, 0xe2, 0x11, 0xb3, 0xd5, 0xfe, 0xc1, 0xc6, 0x78, 0x50, 0x4e, 0x3d, 0x93, 0xc3, 0x1e, 0xda, 0xe1, 0x38, 0x29, 0x54, 0xca, 0xae, 0x44, 0x89, 0x08, 0x01, 0x10, 0x6f, 0x89, 0x94, 0x8c, 0x09, 0xe9, 0x61, 0xa2, 0x98, 0x92, 0x29, 0x49, 0x72, 0x80, 0xf6, 0x09, 0x8f, 0x64, 0x57, 0x4b, 0xdd, 0x2e, 0x25, 0x26, 0x9f, 0x7d, 0x40, 0x0f, 0x46, 0x0c, 0x6a, 0x29, 0x07, 0x35, 0x89, 0x71, 0xf4, 0xd1, 0xe4, 0x85, 0xc9, 0x41, 0xfa, 0x58, 0x08, 0x29, 0xeb, 0x38, 0xf4, 0x70, 0x6c, 0xff, 0x0f, 0xd4, 0x1f, 0x14, 0x99, 0xc6, 0xa1, 0x7a, 0xe0, 0xd6, 0x9b, 0xc0, 0x31, 0x29, 0x4a, 0xb7, 0x36, 0xfc, 0x7d, 0x7c, 0xe3, 0xa8, 0x71, 0x07, 0xe2, 0x48, 0x07, 0x40, 0x64, 0xa0, 0x83, 0xb5, 0x41, 0x80, 0x68, 0xb5, 0x1e, 0x74, 0x3f, 0x36, 0x79, 0x57, 0x29, 0x69, 0xe9, 0xb0, 0xa4, 0x6a, 0xbf, 0xd1, 0xf3, 0xbb, 0xa1, 0xda, 0x33, 0x6a, 0xe1, 0x27, 0x62, 0xbe, 0x2a, 0x2e, 0xb9, 0x01, 0xca, 0x43, 0x1c, 0x5b, 0x8f, 0xf1, 0x96, 0xcb, 0x7d, 0x0c, 0x97, 0x5d, 0xb1, 0xd1, 0x0c, 0x64, 0x74, 0xcd, 0x78, 0xb2, 0x6f, 0x02, 0x55, 0x9b, 0x6b, 0xc0, 0x0d, 0xe2, 0x9e, 0x98, 0x16, 0x5f, 0xcd, 0x51, 0xe7, 0xff, 0x9a, 0x6a, 0x9b, 0xd7, 0x9d, 0xdd, 0x78, 0xc3, 0xbf, 0xec, 0xc6, 0x9d, 0xee, 0xe9, 0x2f, 0x94, 0xf9, 0x2d, 0xe3, 0xd6, 0xb5, 0xc6, 0x5c, 0x7e, 0x18, 0x72, 0x74, 0x92, 0x25, 0xc6, 0xff, 0x53, 0x1d, 0xf2, 0x29, 0xc6, 0x30, 0x25, 0x4f, 0xc3, 0x5d, 0x3f, 0x76, 0xf6, 0x9d, 0xff, 0xdb, 0x6d, 0xa2, 0x49, 0x09, 0x88, 0xf8, 0x6d, 0xaf, 0xf4, 0x1e, 0x29, 0xc7, 0xc1, 0x6f, 0x57, 0x5e, 0x5c, 0x0e, 0x4f, 0x9d, 0x99, 0xa6, 0xdd, 0xf6, 0x49, 0xf0, 0xb8, 0x22, 0x55, 0x45, 0x81, 0x27, 0x0f, 0xde, 0x73, 0x79, 0x43, 0xed, 0x4d, 0x66, 0x81, 0xbe, 0x22, 0x8f, 0x87, 0x96, 0x60, 0xb0, 0x55, 0x8a, 0xcb, 0x24, 0x96, 0xbf, 0x1d, 0x85, 0x6f, 0x7c, 0xd7, 0xb2, 0xa4, 0xc7, 0xba, 0xe4, 0xb9, 0x6b, 0x74, 0x1f, 0xee, 0xec, 0xcc, 0x3e, 0x5e, 0xb4, 0xf6, 0xe3, 0xc6, 0x52, 0x5a, 0xe6, 0x97, 0x6d, 0x17, 0x41, 0xc2, 0xf2, 0x4b, 0x5f, 0xf5, 0x07, 0x9e, 0x87, 0x8f, 0xf2, 0xe2, 0xb5, 0x85, 0x09, 0x38, 0xcb, 0x28, 0x5f, 0x42, 0x2a, 0xd9, 0xb7, 0xac, 0x9d, 0xbc, 0x00, 0x6f, 0x9e, 0xa3, 0x5f, 0xbc, 0x80, 0xe3, 0xa4, 0x8d, 0x9d, 0xed, 0xa6, 0xa1, 0x17, 0xdd, 0x96, 0x4a, 0xb3, 0x24, 0x97, 0x02, 0x95, 0x35, 0xc2, 0x87, 0x61, 0xf4, 0x7c, 0x37, 0x1a, 0xa5, 0x6d, 0x2c, 0x09, 0x7b, 0xec, 0x7d, 0x70, 0x8c, 0x8f, 0xde, 0xd5, 0x3c, 0xe3, 0x36, 0xdb, 0x57, 0x68, 0xbe, 0x43, 0xd4, 0x6e, 0x1c, 0xed, 0x7a, 0xca, 0xe7, 0xc7, 0xf7, 0x46, 0x83, 0x48, 0x45, 0x5a, 0x82, 0xc8, 0x63, 0x23, 0xf3, 0x4c, 0xe8, 0x75, 0xa8, 0x07, 0x87, 0x4d, 0xc0, 0x1f, 0x73, 0x5d, 0xa7, 0xd7, 0xa7, 0xc0, 0x78, 0x9d, 0x4c, 0x45, 0xbe, 0xa4, 0x08, 0x02, 0x5e, 0x51, 0x20, 0x0e, 0x9e, 0xef, 0xb3, 0xb4, 0x0e, 0xdf, 0xac, 0x70, 0x1f, 0x88, 0xad, 0x95, 0xb5, 0xc1, 0x82, 0xf7, 0x64, 0xe1, 0xe8, 0x3a, 0x79, 0x37, 0x7a, 0x94, 0x98, 0xf1, 0xee, 0x5a, 0x7a, 0x59, 0x81, 0x3e, 0x4a, 0x2c, 0x4e, 0xbd, 0x9c, 0x98, 0x96, 0x6a, 0xe9, 0x65, 0x2c, 0x92, 0xfe, 0xc3, 0x30, 0xdc, 0x16, 0xee, 0x35, 0xc6, 0x10, 0xfa, 0x36, 0xe7, 0x6a, 0x52, 0xe1, 0x92, 0x64, 0x8b, 0x06, 0xd7, 0x69, 0xb9, 0xc5, 0x24, 0xb6, 0xba, 0xed, 0x97, 0x69, 0x8f, 0xa3, 0xa5, 0xc3, 0xfd, 0x5a, 0x09, 0x7f, 0xa4, 0x6e, 0x7e, 0xfd, 0xec, 0xcf, 0xd3, 0x04, 0x9f, 0xe5, 0x54, 0xc7, 0x74, 0xf0, 0x53, 0xde, 0xc0, 0x65, 0x1d, 0x7b, 0xb1, 0x61, 0x10, 0xda, 0x06, 0x77, 0x30, 0x52, 0x5e, 0x48, 0x9b, 0x13, 0x3f, 0x13, 0x2a, 0x98, 0xc8, 0xc8, 0x3e, 0x7e, 0xdc, 0x84, 0xad, 0xa5, 0xb5, 0x47, 0x91, 0x24, 0xe4, 0x1a, 0x5c, 0xb0, 0x24, 0x65, 0x12, 0x61, 0x76, 0x8b, 0xb1, 0xb1, 0xfe, 0x4a, 0xbb, 0x24, 0xfb, 0x17, 0x18, 0xbe, 0x5e, 0x6c, 0x4b, 0x27, 0x92, 0x7e, 0xe9, 0x77, 0x5a, 0x0b, 0x55, 0xc1, 0xb4, 0xca, 0x8f, 0x66, 0x92, 0xec, 0xa5, 0x8f, 0x13, 0x0a, 0xb7, 0x6d, 0xe6, 0x6b, 0x55, 0xca, 0x4a, 0xad, 0x36, 0x3a, 0xfb, 0xfc, 0x0f, 0xbf, 0x19, 0xd4, 0xb3, 0xa7, 0x64, 0x35, 0x04, 0x43, 0x70, 0xbd, 0x30, 0x28, 0xe9, 0x60, 0xe8, 0x33, 0xd5, 0xf5, 0x22, 0x67, 0x30, 0x0e, 0xcf, 0x41, 0xe2, 0x27, 0xbe, 0x96, 0x1f, 0x27, 0x8b, 0x9f, 0x3e, 0x8d, 0x72, 0xf2, 0xfc, 0x3f, 0xd9, 0xd8, 0x18, 0x72, 0xf6, 0x97, 0xd7, 0x31, 0xc5, 0x52, 0x8b, 0x1f, 0x57, 0x33, 0xf3, 0x81, 0xbe, 0xab, 0x2c, 0x0c, 0x4a, 0x8d, 0x60, 0x82, 0xa1, 0xdf, 0x40, 0x0f, 0x97, 0xb3, 0xf5, 0x60, 0xea, 0x18, 0xa6, 0x8f, 0x77, 0xac, 0x02, 0x8b, 0xf2, 0x74, 0x74, 0x74, 0x57, 0x38, 0x2a, 0x3a, 0xa2, 0x07, 0xbe, 0x16, 0x59, 0x6f, 0x70, 0x22, 0x38, 0x57, 0xb2, 0xf3, 0xd7, 0x70, 0xb6, 0xeb, 0x88, 0x67, 0x9f, 0x3d, 0x69, 0xbf, 0x43, 0xc5, 0x46, 0x1b, 0xed, 0xf0, 0x30, 0x59, 0x59, 0x85, 0xab, 0x7d, 0x6c, 0x53, 0xa7, 0xa3, 0x6f, 0x72, 0xe6, 0xb9, 0xf8, 0x39, 0x31, 0x62, 0x17, 0x53, 0xa7, 0xc8, 0x26, 0xf1, 0xc2, 0x37, 0xd3, 0x6b, 0x80, 0xbc, 0xc4, 0xe3, 0x8a, 0x8c, 0xcb, 0x03, 0x35, 0xf1, 0x13, 0xd0, 0x58, 0x0b, 0xdf, 0xcb, 0x0f, 0xfd, 0xcb, 0xaf, 0x2a, 0xa6, 0x41, 0x28, 0xed, 0x78, 0x20, 0xd1, 0x0e, 0xca, 0xfa, 0x2c, 0x71, 0xaa, 0xf0, 0xce, 0xca, 0x12, 0x0e, 0x6b, 0x50, 0x82, 0xf0, 0xa9, 0x97, 0xc1, 0x08, 0xbc, 0xc9, 0xe5, 0xd4, 0x29, 0x76, 0xe6, 0x1b, 0x95, 0x81, 0x6f, 0x76, 0xe8, 0x8c, 0x3f, 0x01, 0xb3, 0x2f, 0xc6, 0x3c, 0x75, 0x78, 0xc5, 0xdf, 0xd1, 0xa9, 0xa8, 0x9d, 0x05, 0x22, 0x92, 0x90, 0xd9, 0xd8, 0x0f, 0xd4, 0xce, 0xeb, 0x4c, 0x9c, 0x83, 0x2e, 0x5e, 0xef, 0x60, 0x5e, 0xfd, 0xde, 0x27, 0x2f, 0x50, 0x95, 0x2f, 0x5d, 0xa9, 0x81, 0x63, 0x56, 0x1f, 0x36, 0x67, 0xb7, 0xbf, 0x74, 0x0d, 0x2c, 0xdc, 0x86, 0xe5, 0x01, 0xdf, 0xbf, 0x2a, 0x0e, 0xcd, 0x06, 0xf5, 0x88, 0xcd, 0x4c, 0x4b, 0xaa, 0x59, 0x8e, 0x58, 0x4f, 0x4f, 0x72, 0x50, 0x7d, 0x3b, 0x07, 0x0d, 0xbf, 0x18, 0xe0, 0x03, 0xcb, 0x59, 0x25, 0x41, 0x7d, 0x7e, 0xc8, 0x30, 0xfa, 0xd9, 0xc1, 0x2a, 0xea, 0x86, 0x3b, 0xa2, 0x1e, 0x95, 0xad, 0xe3, 0xbe, 0x29, 0xe3, 0x43, 0x8e, 0x87, 0x0e, 0xbb, 0xb8, 0xce, 0xc6, 0x60, 0x23, 0xd1, 0x51, 0x33, 0xf4, 0xbc, 0xa6, 0xe5, 0xed, 0x7c, 0x61, 0x99, 0x2a, 0x55, 0x66, 0xed, 0xa5, 0x5c, 0x99, 0x3a, 0x46, 0xa2, 0xdc, 0xaf, 0xc3, 0x0d, 0x6b, 0x6d, 0xaa, 0x53, 0xca, 0x08, 0x18, 0x70, 0x2d, 0xc9, 0xf4, 0x90, 0xdb, 0x78, 0x40, 0x32, 0x97, 0xc6, 0x8d, 0x35, 0x26, 0x09, 0x1c, 0x1f, 0x53, 0xf8, 0xe4, 0x1c, 0xe7, 0xfd, 0x6d, 0x18, 0x30, 0x4f, 0x98, 0x7e, 0x86, 0x28, 0x6d, 0x9d, 0xae, 0xa0, 0x34, 0x04, 0x19, 0x4e, 0xa3, 0x9e, 0x54, 0x45, 0xeb, 0x48, 0x2b, 0xf0, 0xf8, 0x97, 0x12, 0xa3, 0xaa, 0xb4, 0xe8, 0xbf, 0x41, 0x72, 0x74, 0xbc, 0x88, 0xbf, 0x3c, 0x46, 0x1c, 0x6a, 0x37, 0x69, 0xa1, 0x78, 0x67, 0xc8, 0x34, 0x24, 0x71, 0x98, 0x1c, 0x10, 0xdb, 0x8a, 0x2e, 0x77, 0xea, 0x50, 0xa2, 0x27, 0x11, 0x34, 0x71, 0x5f, 0xc1, 0x66, 0xa3, 0xe5, 0x65, 0xda, 0x60, 0xb3, 0xf3, 0x22, 0x5c, 0x7c, 0xef, 0x5f, 0x6d, 0xd8, 0x1c, 0xe0, 0x88, 0x71, 0x8f, 0xb3, 0x3e, 0x1a, 0xd6, 0x07, 0x26, 0x22, 0x90, 0x56, 0x9a, 0x48, 0x79, 0xc5, 0x61, 0xe6, 0x05, 0xee, 0xb2, 0x7d, 0xdc, 0x7c, 0xc2, 0x9c, 0x7f, 0x26, 0x7e, 0xbf, 0xcf, 0xb5, 0x4f, 0x47, 0x05, 0x00, 0x07, 0xce, 0x48, 0xec, 0x6d, 0x47, 0x15, 0x1d, 0x1c, 0xc2, 0xbe, 0x38, 0x21, 0x9b, 0xd1, 0x9c, 0xb4, 0xd0, 0xe1, 0x1b, 0x12, 0x0b, 0x7e, 0x2e, 0x2b, 0xd7, 0x40, 0x33, 0xd4, 0x47, 0xff, 0xf2, 0xeb, 0x59, 0x36, 0xbb, 0x03, 0xb2, 0x69, 0x45, 0xb4, 0x7c, 0xa5, 0x42, 0xc6, 0x7d, 0xcf, 0x38, 0x7e, 0xf3, 0x45, 0x6c, 0xe7, 0xb4, 0xb5, 0xaf, 0x83, 0x1f, 0xa9, 0x39, 0xef, 0x76, 0x10, 0x7e, 0xe0, 0x15];
    //let plaintext = [0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x0d, 0x0a, 0x58, 0x2d, 0x58, 0x53, 0x53, 0x2d, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x58, 0x2d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x53, 0x41, 0x4d, 0x45, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x0d, 0x0a, 0x58, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x2d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x6e, 0x6f, 0x73, 0x6e, 0x69, 0x66, 0x66, 0x0d, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x46, 0x72, 0x69, 0x2c, 0x20, 0x32, 0x30, 0x20, 0x4a, 0x75, 0x6e, 0x20, 0x32, 0x30, 0x32, 0x35, 0x20, 0x31, 0x36, 0x3a, 0x33, 0x39, 0x3a, 0x32, 0x35, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x46, 0x72, 0x69, 0x2c, 0x20, 0x32, 0x30, 0x20, 0x4a, 0x75, 0x6e, 0x20, 0x32, 0x30, 0x32, 0x35, 0x20, 0x32, 0x31, 0x3a, 0x35, 0x33, 0x3a, 0x33, 0x32, 0x20, 0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65, 0x3d, 0x31, 0x38, 0x38, 0x34, 0x37, 0x2c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x0d, 0x0a, 0x41, 0x67, 0x65, 0x3a, 0x20, 0x32, 0x39, 0x0d, 0x0a, 0x41, 0x6c, 0x74, 0x2d, 0x53, 0x76, 0x63, 0x3a, 0x20, 0x68, 0x33, 0x3d, 0x22, 0x3a, 0x34, 0x34, 0x33, 0x22, 0x3b, 0x20, 0x6d, 0x61, 0x3d, 0x32, 0x35, 0x39, 0x32, 0x30, 0x30, 0x30, 0x2c, 0x68, 0x33, 0x2d, 0x32, 0x39, 0x3d, 0x22, 0x3a, 0x34, 0x34, 0x33, 0x22, 0x3b, 0x20, 0x6d, 0x61, 0x3d, 0x32, 0x35, 0x39, 0x32, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x0d, 0x0a, 0x56, 0x61, 0x72, 0x79, 0x3a, 0x20, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2c, 0x58, 0x2d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x2c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0d, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x34, 0x30, 0x39, 0x0d, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x22, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x61, 0x6c, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x52, 0x53, 0x32, 0x35, 0x36, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x53, 0x53, 0x44, 0x59, 0x73, 0x35, 0x32, 0x53, 0x55, 0x6e, 0x59, 0x65, 0x68, 0x78, 0x4f, 0x56, 0x2d, 0x47, 0x5f, 0x65, 0x51, 0x34, 0x37, 0x53, 0x6d, 0x4d, 0x38, 0x6d, 0x39, 0x75, 0x62, 0x54, 0x55, 0x55, 0x30, 0x4b, 0x32, 0x34, 0x4c, 0x70, 0x4e, 0x48, 0x6b, 0x37, 0x6a, 0x34, 0x49, 0x43, 0x4d, 0x2d, 0x50, 0x72, 0x65, 0x42, 0x69, 0x5f, 0x6e, 0x70, 0x42, 0x66, 0x78, 0x79, 0x37, 0x6b, 0x41, 0x6f, 0x42, 0x72, 0x35, 0x4b, 0x53, 0x5f, 0x44, 0x70, 0x32, 0x46, 0x41, 0x52, 0x33, 0x32, 0x6a, 0x69, 0x37, 0x65, 0x79, 0x34, 0x32, 0x4a, 0x74, 0x7a, 0x45, 0x2d, 0x78, 0x72, 0x6b, 0x7a, 0x41, 0x49, 0x31, 0x46, 0x6d, 0x62, 0x4c, 0x35, 0x56, 0x6d, 0x78, 0x52, 0x32, 0x44, 0x33, 0x4a, 0x74, 0x4b, 0x34, 0x53, 0x39, 0x4b, 0x79, 0x74, 0x64, 0x35, 0x64, 0x38, 0x78, 0x63, 0x4e, 0x64, 0x73, 0x42, 0x64, 0x41, 0x48, 0x45, 0x6d, 0x6f, 0x51, 0x79, 0x6a, 0x6a, 0x41, 0x61, 0x66, 0x4c, 0x42, 0x6e, 0x78, 0x2d, 0x48, 0x77, 0x47, 0x4a, 0x65, 0x30, 0x43, 0x37, 0x47, 0x33, 0x56, 0x4a, 0x5a, 0x58, 0x4f, 0x75, 0x34, 0x2d, 0x6b, 0x4b, 0x56, 0x76, 0x34, 0x72, 0x71, 0x77, 0x6c, 0x6e, 0x2d, 0x50, 0x75, 0x4d, 0x6c, 0x77, 0x46, 0x7a, 0x39, 0x44, 0x4e, 0x72, 0x34, 0x75, 0x42, 0x55, 0x67, 0x76, 0x74, 0x71, 0x6d, 0x42, 0x50, 0x53, 0x58, 0x64, 0x41, 0x6a, 0x52, 0x73, 0x6b, 0x62, 0x4d, 0x4a, 0x43, 0x6f, 0x34, 0x65, 0x57, 0x72, 0x52, 0x58, 0x63, 0x7a, 0x51, 0x65, 0x72, 0x64, 0x35, 0x6e, 0x6f, 0x51, 0x41, 0x51, 0x6f, 0x5a, 0x6d, 0x52, 0x4e, 0x46, 0x53, 0x31, 0x38, 0x46, 0x63, 0x63, 0x44, 0x63, 0x74, 0x34, 0x65, 0x66, 0x75, 0x54, 0x34, 0x39, 0x70, 0x48, 0x37, 0x42, 0x41, 0x68, 0x79, 0x35, 0x59, 0x48, 0x66, 0x41, 0x46, 0x76, 0x38, 0x76, 0x4d, 0x67, 0x43, 0x70, 0x52, 0x68, 0x71, 0x64, 0x32, 0x56, 0x41, 0x44, 0x59, 0x4a, 0x66, 0x42, 0x56, 0x6c, 0x4a, 0x38, 0x77, 0x4b, 0x4d, 0x43, 0x43, 0x2d, 0x38, 0x79, 0x7a, 0x63, 0x6b, 0x4c, 0x6a, 0x39, 0x56, 0x32, 0x55, 0x51, 0x5a, 0x53, 0x4f, 0x6d, 0x4a, 0x33, 0x49, 0x6f, 0x42, 0x6f, 0x76, 0x6e, 0x46, 0x30, 0x32, 0x45, 0x4e, 0x30, 0x75, 0x4c, 0x30, 0x62, 0x59, 0x4d, 0x75, 0x6e, 0x56, 0x76, 0x6d, 0x30, 0x59, 0x57, 0x50, 0x72, 0x51, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x6b, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x30, 0x64, 0x38, 0x61, 0x36, 0x37, 0x33, 0x39, 0x39, 0x65, 0x37, 0x38, 0x38, 0x32, 0x61, 0x63, 0x61, 0x65, 0x37, 0x64, 0x37, 0x66, 0x36, 0x38, 0x62, 0x32, 0x32, 0x38, 0x30, 0x32, 0x35, 0x36, 0x61, 0x37, 0x39, 0x36, 0x61, 0x35, 0x38, 0x32, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x6b, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x52, 0x53, 0x41, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x41, 0x51, 0x41, 0x42, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x75, 0x73, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x69, 0x67, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x61, 0x6c, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x52, 0x53, 0x32, 0x35, 0x36, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x7a, 0x5f, 0x4d, 0x35, 0x68, 0x33, 0x58, 0x43, 0x7a, 0x65, 0x67, 0x66, 0x4f, 0x47, 0x37, 0x6a, 0x46, 0x59, 0x47, 0x57, 0x55, 0x49, 0x75, 0x77, 0x6a, 0x61, 0x5a, 0x35, 0x2d, 0x52, 0x45, 0x5f, 0x63, 0x46, 0x68, 0x6a, 0x7a, 0x64, 0x75, 0x61, 0x68, 0x4e, 0x4a, 0x70, 0x76, 0x5f, 0x73, 0x45, 0x42, 0x44, 0x5f, 0x4b, 0x36, 0x5a, 0x75, 0x61, 0x72, 0x56, 0x54, 0x41, 0x66, 0x59, 0x50, 0x5f, 0x35, 0x66, 0x66, 0x36, 0x6e, 0x55, 0x42, 0x6b, 0x46, 0x79, 0x75, 0x31, 0x44, 0x5a, 0x37, 0x70, 0x5a, 0x69, 0x4e, 0x4a, 0x5f, 0x72, 0x74, 0x56, 0x66, 0x65, 0x66, 0x64, 0x5f, 0x6d, 0x43, 0x55, 0x5a, 0x58, 0x36, 0x69, 0x6f, 0x4c, 0x72, 0x6a, 0x30, 0x49, 0x4a, 0x4e, 0x67, 0x63, 0x57, 0x39, 0x39, 0x7a, 0x67, 0x36, 0x4b, 0x5a, 0x32, 0x39, 0x49, 0x63, 0x65, 0x6f, 0x4f, 0x39, 0x6c, 0x36, 0x30, 0x31, 0x62, 0x79, 0x37, 0x61, 0x6b, 0x7a, 0x4a, 0x6a, 0x30, 0x4e, 0x49, 0x67, 0x32, 0x49, 0x39, 0x4c, 0x33, 0x30, 0x50, 0x77, 0x34, 0x50, 0x63, 0x42, 0x51, 0x75, 0x53, 0x6a, 0x4b, 0x79, 0x69, 0x75, 0x4a, 0x51, 0x54, 0x33, 0x55, 0x4a, 0x52, 0x33, 0x5a, 0x65, 0x50, 0x45, 0x4e, 0x68, 0x30, 0x35, 0x48, 0x55, 0x39, 0x43, 0x5a, 0x42, 0x59, 0x32, 0x7a, 0x4d, 0x4f, 0x76, 0x47, 0x38, 0x77, 0x42, 0x63, 0x38, 0x34, 0x4a, 0x34, 0x78, 0x4b, 0x58, 0x46, 0x38, 0x6e, 0x4a, 0x4e, 0x73, 0x55, 0x2d, 0x6c, 0x65, 0x47, 0x59, 0x7a, 0x78, 0x52, 0x36, 0x46, 0x61, 0x75, 0x61, 0x79, 0x79, 0x42, 0x35, 0x66, 0x36, 0x49, 0x5f, 0x6e, 0x76, 0x5a, 0x44, 0x45, 0x70, 0x39, 0x51, 0x7a, 0x47, 0x45, 0x56, 0x46, 0x4d, 0x58, 0x30, 0x4a, 0x37, 0x56, 0x4e, 0x63, 0x5a, 0x79, 0x59, 0x55, 0x45, 0x68, 0x32, 0x5a, 0x37, 0x77, 0x59, 0x57, 0x58, 0x39, 0x72, 0x79, 0x73, 0x7a, 0x44, 0x34, 0x30, 0x7a, 0x58, 0x55, 0x46, 0x62, 0x74, 0x52, 0x54, 0x39, 0x70, 0x4e, 0x44, 0x38, 0x68, 0x61, 0x55, 0x63, 0x48, 0x5f, 0x48, 0x64, 0x73, 0x79, 0x32, 0x74, 0x65, 0x59, 0x6c, 0x48, 0x71, 0x74, 0x78, 0x34, 0x49, 0x50, 0x79, 0x4c, 0x39, 0x50, 0x44, 0x17];

    let len_of_first_packet = (http_response[3] as usize)*256 + (http_response[4] as usize) + 5;

    let mut iv = server_application_iv.clone();
    let mut records_received: u8= 1;
    iv[11] ^= records_received;

    let mut plaintext = decrypt(&server_application_key, &iv.try_into().unwrap(), &http_response[..len_of_first_packet]);

    // Увеличиваем количество полученных записей
    records_received += 1;

    //let ciphertext2 = &http_response[len_of_first_packet..];
    let mut iv2 = server_application_iv.clone();
    iv2[11] ^= records_received;
    let mut plaintext2 = decrypt(&server_application_key, &iv2.try_into().unwrap(), &http_response[len_of_first_packet..]);

    plaintext.append(&mut plaintext2);

    let plaintext_as_string = String::from_utf8_lossy(&plaintext).to_string();

    let expires_timestamp = format::extract_expires(&plaintext_as_string);

    let strings_n = format::extract_all_items("n",&plaintext_as_string); // = format::extract_all_n(&plaintext_as_string);
    let strings_kid = format::extract_all_items("kid",&plaintext_as_string);

    //let mut hashes_n: Vec<u8> = Vec::new();
    let mut counter = 0;

    for substring in strings_kid {

        //let mut current = substring.as_bytes().to_vec();
        let mut current_decoded_kid = Vec::from_hex(substring).unwrap();

        if current_decoded_kid.eq(&kid.to_vec()){
            let mut current_decoded_n = decode(&strings_n[counter]).unwrap();
            let mut result = vec![1u8];

            append_uint64(&mut result, expires_timestamp as u64);

            result.append(&mut current_decoded_n.to_vec());

            return result;

        }

        //let hash_of_current_n = hkdf_sha256::sum256( &current_decoded_n);
        //hashes_n.append(&mut hash_of_current_n.to_vec());
        counter += 1;
    }

    //let mut result = vec![1u8];
    //result.push(strings_n.len() as u8);
    //result.append(&mut hashes_n);

    //let expires_timestamp = format::extract_expires(&plaintext_as_string);
    //result.append(&mut expires_timestamp.to_be_bytes().to_vec());


    return vec![0u8, 3u8, 43u8]; // "kid not found "
}
